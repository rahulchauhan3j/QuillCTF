// MAIN macro takes 0 inputs and returns 1 output
#define macro MAIN() = takes(0) returns (1) {
    caller 0x00  mstore              // Step 1 - caller is stored in memory at 0x00

    origin 0x20 mstore               // Step 2 - origin is stored in memory at 0x20

    0x20                             // push 0x20 into stack  for number of bytes to be returned later by "return". Stack will look like [0x20]

    0x00 calldataload 0xE0 shr       // push func sel from calldata load into stack. Stack looks like [0x00, 0x20] when  
                                     // when f00000000_bvvvdlt() is called becauese abi.encodeWithSignature("f00000000_bvvvdlt()") is 0x00
                                     // and stack looks like [0x01,0x20] when f00000001_grffjzz() is called becauese abi.encodeWithSignature("f00000001_bvvvdlt()") is 0x01
                                     
    0x20                             // push 0x20 into stack . Stack will look like [0x20,0x00,0x20] for  f00000000_bvvvdlt() and [0x20,0x01,0x20] for f00000001_grffjzz() 
    
    mul                              // perform a multiplication operation on upper most elements of stack. Stack will look like [0x00,0x20] for  f00000000_bvvvdlt()
                                     // and [0x20,0x20] for f00000001_grffjzz() 
      
    return                           // caller will be returned for [0x00,0x20] see step 1. origin will be returned for [0x20,0x20] see step 2.

                                     // For call to "fail()" i.e 0xa9cc4718, invalid val will be returned,
}